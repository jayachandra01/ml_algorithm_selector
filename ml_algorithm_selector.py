# -*- coding: utf-8 -*-
"""ml_algorithm_selector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HBAHS_JcS1Byy5EYHz1XFvOlKYWtrNqT
"""

def get_user_input(prompt):
    return input(prompt).strip().lower()

def decide_ml_algorithm():
    print("Welcome to the ML Algorithm Selector!")

    # Step 1: Determine the type of problem
    problem_type = get_user_input("Is your problem a (1) Classification, (2) Regression, or (3) Clustering problem? Enter 1, 2, or 3: ")

    if problem_type == '1':
        print("You have a Classification problem.")

        # Step 2: Check if it's a binary or multi-class classification
        class_type = get_user_input("Is it (1) Binary classification or (2) Multi-class classification? Enter 1 or 2: ")

        # Step 3: Check if the data is labeled
        labeled_data = get_user_input("Do you have labeled data? (yes/no): ")

        if labeled_data == 'yes':
            if class_type == '1':
                print("Recommended Algorithm: Logistic Regression or Support Vector Machine (SVM)")
            elif class_type == '2':
                print("Recommended Algorithm: Random Forest or Gradient Boosting")
        else:
            print("Recommended Algorithm: K-Means Clustering for grouping similar data points")

    elif problem_type == '2':
        print("You have a Regression problem.")

        # Step 2: Check the number of features
        num_features = get_user_input("Do you have (1) One feature or (2) Multiple features? Enter 1 or 2: ")

        if num_features == '1':
            print("Recommended Algorithm: Simple Linear Regression")
        elif num_features == '2':
            print("Recommended Algorithm: Multiple Linear Regression or Random Forest Regressor")

    elif problem_type == '3':
        print("You have a Clustering problem.")

        # Step 2: Check if the number of clusters is known
        num_clusters_known = get_user_input("Do you know the number of clusters? (yes/no): ")

        if num_clusters_known == 'yes':
            print("Recommended Algorithm: K-Means Clustering")
        else:
            print("Recommended Algorithm: DBSCAN or Hierarchical Clustering")

    else:
        print("Invalid choice. Please restart the program and enter 1, 2, or 3.")

# Run the ML Algorithm Selector
decide_ml_algorithm()